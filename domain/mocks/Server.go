// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/phonkee/goexpose/domain"
	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// GetRoutes provides a mock function with given fields: ignored
func (_m *Server) GetRoutes(ignored []string) ([]*domain.Route, error) {
	ret := _m.Called(ignored)

	var r0 []*domain.Route
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*domain.Route, error)); ok {
		return rf(ignored)
	}
	if rf, ok := ret.Get(0).(func([]string) []*domain.Route); ok {
		r0 = rf(ignored)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Route)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ignored)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields:
func (_m *Server) GetVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *Server) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServer(t mockConstructorTestingTNewServer) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
