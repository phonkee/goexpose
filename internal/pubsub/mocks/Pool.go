// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	pubsub "github.com/phonkee/goexpose/internal/pubsub"
	mock "github.com/stretchr/testify/mock"
)

// Pool is an autogenerated mock type for the Pool type
type Pool struct {
	mock.Mock
}

// Close provides a mock function with given fields: id
func (_m *Pool) Close(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *Pool) Get(name string) (pubsub.Hub, bool, error) {
	ret := _m.Called(name)

	var r0 pubsub.Hub
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (pubsub.Hub, bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) pubsub.Hub); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsub.Hub)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewPool interface {
	mock.TestingT
	Cleanup(func())
}

// NewPool creates a new instance of Pool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPool(t mockConstructorTestingTNewPool) *Pool {
	mock := &Pool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
