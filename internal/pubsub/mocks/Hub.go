// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/phonkee/goexpose/domain"
	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/phonkee/goexpose/internal/pubsub"
)

// Hub is an autogenerated mock type for the Hub type
type Hub struct {
	mock.Mock
}

// NewSession provides a mock function with given fields:
func (_m *Hub) NewSession() (pubsub.Session, error) {
	ret := _m.Called()

	var r0 pubsub.Session
	var r1 error
	if rf, ok := ret.Get(0).(func() (pubsub.Session, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() pubsub.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsub.Session)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, message
func (_m *Hub) Publish(ctx context.Context, message *domain.PubSubMessage) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PubSubMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Session provides a mock function with given fields: id
func (_m *Hub) Session(id string) (pubsub.Session, bool) {
	ret := _m.Called(id)

	var r0 pubsub.Session
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (pubsub.Session, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) pubsub.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsub.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: ctx, channels
func (_m *Hub) Subscribe(ctx context.Context, channels ...string) (pubsub.Session, error) {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pubsub.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (pubsub.Session, error)); ok {
		return rf(ctx, channels...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) pubsub.Session); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsub.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, channels...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHub interface {
	mock.TestingT
	Cleanup(func())
}

// NewHub creates a new instance of Hub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHub(t mockConstructorTestingTNewHub) *Hub {
	mock := &Hub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
